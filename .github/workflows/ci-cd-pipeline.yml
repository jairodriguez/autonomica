name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual triggering

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Testing and Building
  frontend:
    name: Frontend - Test & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'autonomica-frontend/package-lock.json'
          
      - name: Install frontend dependencies
        run: |
          cd autonomica-frontend
          npm ci
          
      - name: Lint frontend
        run: |
          cd autonomica-frontend
          npm run lint
          
      - name: Type check frontend
        run: |
          cd autonomica-frontend
          npm run typecheck || npm run build
          
      - name: Test frontend
        run: |
          cd autonomica-frontend
          npm test -- --coverage --watchAll=false
          
      - name: Build frontend
        run: |
          cd autonomica-frontend
          npm run build
          
      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: autonomica-frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Backend Testing and Building
  backend:
    name: Backend - Test & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'autonomica-api/requirements.txt'
          
      - name: Install backend dependencies
        run: |
          cd autonomica-api
          pip install -r requirements.txt
          pip install -r requirements-seo.txt
          
      - name: Lint backend
        run: |
          cd autonomica-api
          ruff check .
          ruff format --check .
          
      - name: Type check backend
        run: |
          cd autonomica-api
          mypy . --ignore-missing-imports
          
      - name: Test backend
        run: |
          cd autonomica-api
          pytest --cov=. --cov-report=xml --cov-report=html
          
      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: autonomica-api/coverage.xml
          flags: backend
          name: backend-coverage

  # Worker Pod Testing and Building
  worker:
    name: Worker Pod - Test & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'worker/requirements.txt'
          
      - name: Install worker dependencies
        run: |
          cd worker
          pip install -r requirements.txt
          
      - name: Test worker
        run: |
          cd worker
          python -m pytest tests/ -v
          
      - name: Build Docker image
        run: |
          cd worker
          docker build -t autonomica-worker:test .

  # Integration Testing
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend, worker]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          pip install pytest-asyncio httpx
          cd autonomica-api
          pip install -r requirements.txt
          
      - name: Run integration tests
        run: |
          cd autonomica-api
          pytest tests/integration/ -v

  # Security and Quality Checks
  security:
    name: Security & Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Ruff security scan
        run: |
          cd autonomica-api
          ruff check --select S .
          
      - name: Run Safety check
        run: |
          pip install safety
          cd autonomica-api
          safety check -r requirements.txt --json --output safety-report.json
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            safety-report.json

  # Deploy to Staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend, backend, worker, integration, security]
    if: github.ref == 'refs/heads/develop'
    environment: 
      name: staging
      url: https://staging.autonomica.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy frontend to Vercel (staging)
        run: |
          npm i -g vercel
          cd autonomica-frontend
          vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          
      - name: Deploy worker to Railway (staging)
        run: |
          npm i -g @railway/cli
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          cd worker
          railway up --service worker-staging --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  # Deploy to Production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend, backend, worker, integration, security]
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://autonomica.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy frontend to Vercel (production)
        run: |
          npm i -g vercel
          cd autonomica-frontend
          vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          
      - name: Deploy worker to Railway (production)
        run: |
          npm i -g @railway/cli
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          cd worker
          railway up --service worker --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          
      - name: Run smoke tests
        run: |
          sleep 30  # Wait for deployment
          curl -f https://api.autonomica.app/api/health || echo "API health check failed"
          curl -f https://autonomica.vercel.app/ || echo "Frontend health check failed"

  # Notifications
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "✅ Deployment completed successfully!"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
