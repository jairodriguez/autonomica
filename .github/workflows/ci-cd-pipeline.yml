name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: autonomica

jobs:
  # Frontend Testing and Building
  frontend:
    name: Frontend - Test & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./autonomica-frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run type checking
        run: npm run type-check || npm run build
        
      - name: Run tests
        run: npm test -- --coverage --watchAll=false
        
      - name: Build application
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./autonomica-frontend/.next
          retention-days: 7

  # Backend Testing and Building
  backend:
    name: Backend - Test & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./autonomica-api
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev libffi-dev
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt || pip install pytest pytest-cov flake8 black isort
          
      - name: Run linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check --diff .
          isort --check-only --diff .
          
      - name: Run type checking
        run: |
          pip install mypy
          mypy . --ignore-missing-imports || true
          
      - name: Run tests
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./autonomica-api/coverage.xml
          flags: backend
          name: backend-coverage
          
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: |
            ./autonomica-api/coverage.xml
            ./autonomica-api/htmlcov/
          retention-days: 7

  # Worker Pod Testing and Building
  worker:
    name: Worker Pod - Test & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./autonomica-worker
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev libffi-dev
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black isort
          
      - name: Run linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check --diff .
          isort --check-only --diff .
          
      - name: Run tests
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./autonomica-worker/coverage.xml
          flags: worker
          name: worker-coverage
          
      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/worker:${{ github.sha }} .
          docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}/worker:latest .
          
      - name: Upload Docker artifacts
        uses: actions/upload-artifact@v4
        with:
          name: worker-docker-image
          path: |
            ./autonomica-worker/Dockerfile
            ./autonomica-worker/docker-compose.yml
          retention-days: 7

  # Security Scanning
  security:
    name: Security - CodeQL & Dependencies
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Integration Testing
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend, worker]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          cd autonomica-api
          pip install -r requirements.txt
          pip install pytest-asyncio httpx
          
      - name: Run integration tests
        run: |
          cd autonomica-api
          pytest tests/integration/ -v --tb=short
        env:
          REDIS_URL: redis://localhost:6379
          TESTING: true

  # E2E Testing
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend, worker]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Playwright
        run: |
          cd autonomica-frontend
          npm ci
          npx playwright install --with-deps
          
      - name: Run E2E tests
        run: |
          cd autonomica-frontend
          npm run test:e2e
        env:
          CI: true

  # Deployment to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend, backend, worker, integration, e2e]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy Frontend to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./autonomica-frontend
          vercel-args: '--prod'
          
      - name: Deploy Worker to Railway (Staging)
        run: |
          npm install -g @railway/cli
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          cd autonomica-worker
          railway up --service worker --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          
      - name: Run staging smoke tests
        run: |
          sleep 30  # Wait for deployment
          curl -f ${{ secrets.STAGING_API_URL }}/health || exit 1

  # Deployment to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend, backend, worker, integration, e2e]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy Frontend to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./autonomica-frontend
          vercel-args: '--prod'
          
      - name: Deploy Worker to Railway (Production)
        run: |
          npm install -g @railway/cli
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          cd autonomica-worker
          railway up --service worker --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          
      - name: Run production smoke tests
        run: |
          sleep 30  # Wait for deployment
          curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1
          
      - name: Notify deployment success
        run: |
          echo "🚀 Production deployment completed successfully!"
          echo "Frontend: ${{ secrets.PRODUCTION_FRONTEND_URL }}"
          echo "API: ${{ secrets.PRODUCTION_API_URL }}"

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install Locust
        run: pip install locust
        
      - name: Run load tests
        run: |
          cd autonomica-api
          locust -f tests/performance/locustfile.py \
            --host=${{ secrets.STAGING_API_URL }} \
            --users=100 \
            --spawn-rate=10 \
            --run-time=5m \
            --headless \
            --html=locust-report.html
            
      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: ./autonomica-api/locust-report.html
          retention-days: 30

  # Notifications
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy-production, performance]
    if: always()
    
    steps:
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ CI/CD Pipeline failed!"
          echo "Check the logs for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
      - name: Notify on success
        if: success()
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "All tests passed and deployments completed."