version: '3.8'

services:
  # Frontend Application
  frontend-staging:
    build:
      context: ./autonomica-frontend
      dockerfile: Dockerfile.staging
      target: staging
    container_name: autonomica-frontend-staging
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=staging
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
    env_file:
      - staging.env
    depends_on:
      - api-staging
    networks:
      - autonomica-staging
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-staging.rule=Host(`staging-frontend.autonomica.ai`)"
      - "traefik.http.routers.frontend-staging.tls=true"
      - "traefik.http.services.frontend-staging.loadbalancer.server.port=3000"

  # Backend API
  api-staging:
    build:
      context: ./autonomica-api
      dockerfile: Dockerfile.staging
      target: staging
    container_name: autonomica-api-staging
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql://staging_user:staging_password@staging-db:5432/autonomica_staging
      - REDIS_URL=redis://staging-redis:6379/0
    env_file:
      - staging.env
    depends_on:
      - staging-db
      - staging-redis
    networks:
      - autonomica-staging
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-staging.rule=Host(`staging-api.autonomica.ai`)"
      - "traefik.http.routers.api-staging.tls=true"
      - "traefik.http.services.api-staging.loadbalancer.server.port=8000"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads

  # Worker Pod
  worker-staging:
    build:
      context: ./autonomica-worker
      dockerfile: Dockerfile.staging
      target: staging
    container_name: autonomica-worker-staging
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql://staging_user:staging_password@staging-db:5432/autonomica_staging
      - REDIS_URL=redis://staging-redis:6379/0
    env_file:
      - staging.env
    depends_on:
      - staging-db
      - staging-redis
    networks:
      - autonomica-staging
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.worker-staging.rule=Host(`staging-worker.autonomica.ai`)"
      - "traefik.http.routers.worker-staging.tls=true"
      - "traefik.http.services.worker-staging.loadbalancer.server.port=8001"
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data

  # PostgreSQL Database
  staging-db:
    image: postgres:15-alpine
    container_name: autonomica-staging-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=autonomica_staging
      - POSTGRES_USER=staging_user
      - POSTGRES_PASSWORD=staging_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - staging-postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    networks:
      - autonomica-staging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U staging_user -d autonomica_staging"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  staging-redis:
    image: redis:7-alpine
    container_name: autonomica-staging-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - staging-redis-data:/data
    networks:
      - autonomica-staging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy
  nginx-staging:
    image: nginx:alpine
    container_name: autonomica-nginx-staging
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend-staging
      - api-staging
      - worker-staging
    networks:
      - autonomica-staging
    labels:
      - "traefik.enable=false"

  # Traefik Load Balancer
  traefik-staging:
    image: traefik:v2.10
    container_name: autonomica-traefik-staging
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "8443:8443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/staging.toml:/etc/traefik/traefik.toml:ro
      - ./traefik/ssl:/etc/traefik/ssl:ro
    networks:
      - autonomica-staging
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-staging.rule=Host(`staging-traefik.autonomica.ai`)"
      - "traefik.http.routers.traefik-staging.service=api@internal"
      - "traefik.http.routers.traefik-staging.tls=true"

  # Monitoring Stack
  prometheus-staging:
    image: prom/prometheus:latest
    container_name: autonomica-prometheus-staging
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/staging.yml:/etc/prometheus/prometheus.yml:ro
      - staging-prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    networks:
      - autonomica-staging
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus-staging.rule=Host(`staging-monitoring.autonomica.ai`)"
      - "traefik.http.routers.prometheus-staging.service=prometheus-staging@docker"
      - "traefik.http.routers.prometheus-staging.tls=true"

  grafana-staging:
    image: grafana/grafana:latest
    container_name: autonomica-grafana-staging
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=staging_grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - staging-grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus-staging
    networks:
      - autonomica-staging
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana-staging.rule=Host(`staging-grafana.autonomica.ai`)"
      - "traefik.http.routers.grafana-staging.service=grafana-staging@docker"
      - "traefik.http.routers.grafana-staging.tls=true"

  # Logging Stack
  elasticsearch-staging:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: autonomica-elasticsearch-staging
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - staging-elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - autonomica-staging
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana-staging:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: autonomica-kibana-staging
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-staging:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch-staging
    networks:
      - autonomica-staging
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana-staging.rule=Host(`staging-logs.autonomica.ai`)"
      - "traefik.http.routers.kibana-staging.service=kibana-staging@docker"
      - "traefik.http.routers.kibana-staging.tls=true"

  # Backup Service
  backup-staging:
    image: postgres:15-alpine
    container_name: autonomica-backup-staging
    restart: "no"
    environment:
      - PGPASSWORD=staging_password
    volumes:
      - ./database/backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - staging-db
    networks:
      - autonomica-staging
    command: ["/bin/sh", "/backup.sh"]

  # Health Check Service
  healthcheck-staging:
    image: curlimages/curl:latest
    container_name: autonomica-healthcheck-staging
    restart: "no"
    environment:
      - FRONTEND_URL=http://frontend-staging:3000/health
      - API_URL=http://api-staging:8000/health
      - WORKER_URL=http://worker-staging:8001/health
    volumes:
      - ./scripts/healthcheck.sh:/healthcheck.sh:ro
    depends_on:
      - frontend-staging
      - api-staging
      - worker-staging
    networks:
      - autonomica-staging
    command: ["/bin/sh", "/healthcheck.sh"]

networks:
  autonomica-staging:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  staging-postgres-data:
    driver: local
  staging-redis-data:
    driver: local
  staging-prometheus-data:
    driver: local
  staging-grafana-data:
    driver: local
  staging-elasticsearch-data:
    driver: local