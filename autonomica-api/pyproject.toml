[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "autonomica-api"
version = "0.1.0"
description = "Autonomica API - AI-powered multi-agent system"
authors = [
    {name = "Autonomica Team", email = "team@autonomica.ai"}
]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.4.2",
    "redis>=5.0.1",
    "celery>=5.3.4",
    "openai>=1.6.1",
    "httpx>=0.25.2",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]
test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",
]
docs = [
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
skip-string-normalization = false
skip-magic-trailing-comma = false
preview = false

# isort Configuration
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["app", "tests"]
known_third_party = ["fastapi", "pydantic", "redis", "celery", "openai"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"

# Flake8 Configuration
[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "W503",  # line break before binary operator
    "E501",  # line too long (handled by black)
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "env",
    ".env",
    "build",
    "dist",
    "*.egg-info",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101,S105,S106,S108",
]

# MyPy Configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "celery.*",
    "playwright.*",
    "tweepy.*",
]
ignore_missing_imports = true

# Coverage Configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
    "conftest.py",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@\\(abc\\.\\)?abstractmethod",
    "def __init__",
    "def __new__",
    "def __del__",
    "def __enter__",
    "def __exit__",
    "def __aenter__",
    "def __aexit__",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit Security Configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "env", ".env"]
skips = ["B101", "B601"]

# Pytest Configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=70",
    "--cov-branch",
    "--durations=10",
    "--maxfail=5",
    "--reruns=2",
    "--reruns-delay=1",
]
markers = [
    "unit: Unit tests (fast, no external dependencies)",
    "integration: Integration tests (slower, external dependencies)",
    "e2e: End-to-end tests (slowest, full system)",
    "slow: Slow running tests",
    "fast: Fast running tests",
    "auth: Authentication related tests",
    "api: API endpoint tests",
    "database: Database related tests",
    "redis: Redis related tests",
    "celery: Celery task tests",
    "ai: AI/ML related tests",
    "security: Security related tests",
    "performance: Performance tests",
    "smoke: Smoke tests for basic functionality",
    "regression: Regression tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
    "ignore::FutureWarning",
]
minversion = "6.0"
console_output_style = "classic"

# Radon Configuration
[tool.radon]
cc_min = "A"
mi_min = "A"
hal_min = "A"
maintainability_index = "A"
complexity = "A"

# Xenon Configuration
[tool.xenon]
max_absolute_complexity = 10
max_average_complexity = 5
max_module_complexity = 10
max_average_complexity_threshold = 5

# Pre-commit Configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.5.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
            {id = "check-case-conflict"},
            {id = "check-docstring-first"},
            {id = "check-json"},
            {id = "check-merge-conflict"},
            {id = "check-toml"},
            {id = "debug-statements"},
            {id = "name-tests-test"},
            {id = "requirements-txt-fixer"},
        ],
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.11.0",
        hooks = [{id = "black", language_version = "python3"}],
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [{id = "isort", args = ["--profile", "black"]}],
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.1.0",
        hooks = [{id = "flake8"}],
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.7.0",
        hooks = [
            {
                id = "mypy",
                additional_dependencies = [
                    "types-requests",
                    "types-PyYAML",
                    "types-redis",
                    "types-python-dateutil",
                ],
            },
        ],
    },
    {
        repo = "https://github.com/PyCQA/bandit",
        rev = "1.7.5",
        hooks = [{id = "bandit", args = ["-r", ".", "-f", "json", "-o", "bandit-report.json"]}],
    },
    {
        repo = "https://github.com/PyCQA/safety",
        rev = "2.3.5",
        hooks = [{id = "safety", args = ["--output", "json", "--save", "safety-report.json"]}],
    },
]

# Task Configuration (invoke)
[tool.invoke]
tasks = {
    "autoformat": {
        "help": "Automatically format code using black and isort",
        "shell": "black . && isort .",
    },
    "lint": {
        "help": "Run all linting tools",
        "shell": "flake8 . && mypy . && bandit -r . && safety check",
    },
    "test": {
        "help": "Run tests with coverage",
        "shell": "pytest --cov=app --cov-report=html --cov-report=term-missing",
    },
    "quality": {
        "help": "Run all code quality checks",
        "shell": "invoke autoformat && invoke lint && invoke test",
    },
}