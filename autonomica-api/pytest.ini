[tool:pytest]
# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output and reporting
addopts = 
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --cov=app
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=70
    --cov-branch
    --cov-config=.coveragerc
    --durations=10
    --maxfail=5
    --reruns=2
    --reruns-delay=1

# Markers
markers =
    unit: Unit tests (fast, no external dependencies)
    integration: Integration tests (slower, external dependencies)
    e2e: End-to-end tests (slowest, full system)
    slow: Slow running tests
    fast: Fast running tests
    auth: Authentication related tests
    api: API endpoint tests
    database: Database related tests
    redis: Redis related tests
    celery: Celery task tests
    ai: AI/ML related tests
    security: Security related tests
    performance: Performance tests
    smoke: Smoke tests for basic functionality
    regression: Regression tests

# Test configuration
minversion = 6.0
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning
    ignore::FutureWarning

# Environment variables for testing
env =
    TESTING=true
    ENVIRONMENT=test
    LOG_LEVEL=DEBUG
    REDIS_URL=redis://localhost:6379/1
    DATABASE_URL=sqlite:///./test.db
    OPENAI_API_KEY=test-key
    CLERK_SECRET_KEY=test-key

# Coverage configuration
[coverage:run]
source = app
omit = 
    */tests/*
    */migrations/*
    */__pycache__/*
    */venv/*
    */env/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Test output configuration
[tool:pytest.ini_options]
console_output_style = classic